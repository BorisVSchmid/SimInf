% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/abc_smc.R
\name{abc_smc}
\alias{abc_smc}
\title{Run ABC SMC}
\usage{
abc_smc(model, priors, ngen, npart, fn, ..., verbose = TRUE)
}
\arguments{
\item{model}{The model to generate data from.}

\item{priors}{The priors for the parameters to fit. Each prior is
specified with a formula notation, for example, \code{beta ~
U(0, 1)} to specify that beta is uniformly distributed between
0 and 1. Use \code{c()} to provide more than one prior, for
example, \code{c(beta ~ U(0, 1), gamma ~ N(10, 1)}. Gamma
\code{G}, normal \code{N} and uniform \code{U} distributions
are supported.}

\item{ngen}{The number of generations of ABC-SMC to run.}

\item{npart}{An integer specifying the number of particles.}

\item{fn}{A function for calculating the summary statistics for
the simulated trajectory and determine for each node
(particle) if it should be accepted (\code{TRUE}) or rejected
(\code{FALSE}). The first argument in \code{fn} is the
simulated model containing one trajectory. The second argument
to \code{fn} is an integer with the \code{generation}
particles. The function should return a logical vector with
one value for each node in the simulated model.}

\item{...}{Further arguments to be passed to \code{fn}.}

\item{verbose}{= TRUE}
}
\value{
A data.frame with columns: generation, weight and
    parameters.
}
\description{
Run ABC SMC
}
\examples{
## Fit a model to data from an influenza in a boarding school in
## England (Anonymous. 1978. Influenza in a boarding school.
## British Medical Journal 1:578.)
obs <- data.frame(time = 1:15,
                  R1 = c(0, 1, 6, 26, 73, 222, 293, 258,
                         236, 191, 124, 69, 26, 11, 4))

## The distance function to accept or reject a proposal. Each node
## in the simulated trajectory (contained in the 'result' object)
## represents one proposal. The 'generation' argument is the current
## generation of proposals.
acceptFun <- function(result, generation, tol, ptol, ...) {
    ## Determine the tolerance for this generation.
    tol <- tol * (ptol)^(generation - 1)

    ## Extract the time-series for R1 for each node as a
    ## data.frame.
    sim <- trajectory(result, "R1")

    ## Split the 'sim' data.frame by node and calculate the sum
    ## of the squared distance at each time-point for each node.
    dist <- tapply(sim$R1, sim$node, function(sim_R1) {
        sum((obs$R1 - sim_R1)^2)
    })

    ## Return TRUE or FALSE for each node depending on if the
    ## distance is less than the tolerance.
    dist < tol
}

## Transitions
transitions <- c("S -> beta*S*I/(S+I+R1+R2) -> I",
                 "I -> gamma1*I -> R1",
                 "R1 -> gamma2*R1 -> R2")

## Specify the compartments.
compartments <- c("S", "I", "R1", "R2")

## Create the model.
model <- mparse(transitions = transitions,
                compartments = compartments,
                ldata = data.frame(beta = 0.1, gamma1 = 0.1, gamma2 = 0.1),
                u0 = data.frame(S = 762, I = 1, R1 = 0, R2 = 0),
                tspan = 1:15)

## Fit the model parameters using ABC-SMC. The priors for the paramters
## are specified in the second argument using a formula notation. Here
## we use a uniform distribtion for each parameter with lower bound = 0
## and upper bound = 5.
fit <- abc_smc(model = model,
               priors = c(beta~U(0, 5), gamma1~U(0, 5), gamma2~U(0, 5)),
               ngen = 3,
               npart = 50,
               fn = acceptFun,
               tol = 100000,
               ptol = 0.5)

plot(fit)
}
