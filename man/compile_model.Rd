% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compile_model.R
\name{compile_model}
\alias{compile_model}
\title{Function to compile custom \code{\link{SimInf_model}}.}
\usage{
compile_model(model, name)
}
\arguments{
\item{model}{An object of class \code{\link{SimInf_model}}.}

\item{name}{A character specifying the name of the shared library that 
will be created. This is prefixed with "SimInf-" once the
function has been run.}
}
\value{
A \code{\link{SimInf_model}}.
}
\description{
This function compiles a model specified using \code{\link{mparse}}
function, and produces a \code{\link{SimInf_model}} object with an
internal link to a shared library file that can be run in the usual way. 
This is useful for routines that require multiple calls to the \code{run}
method for \code{\link{SimInf_model}} objects, since it avoids the need
to re-compile the model each time \code{run} is called.
}
\examples{
## Create an SIR model object using mparse.
transitions <- c("S -> beta*S*I -> I", "I -> gamma*I -> R")
compartments <- c("S", "I", "R")
u0 <- data.frame(S = 99, I = 1, R = 0)
model <- mparse(transitions = transitions, 
    compartments = compartments,
    gdata = c(beta = 0.16, gamma = 0.077), 
    u0 = u0, tspan = 1:100)

## Run the SIR model and plot the result.
## This recompiles the model when run()
## is called
set.seed(22)
result <- run(model)
plot(result)

## Compile the model first and then re-run
set.seed(22)
model <- compile_model(model, "SIR")
class(model)
result <- run(model)
plot(result)
}
